<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.ar.lighthouse.orders.mapper.OrdersMapper">
  
  	<!-- 주문결제 필요 데이터 파싱 -->
  	<select id="selectOrders" resultType="com.ar.lighthouse.orders.service.OrdersVO">
  	 SELECT c.member_id,
                   m.member_name,
                   m.member_email,
                   m.member_tel,
                   r.delivery_cost,
                   r.delivery_service,
                   r.product_code,
                   m.member_addr,
                   m.member_details_addr,
                   c.cart_count,
                   p.option_price,
                   r.product_name,
                   r.sale_price,
                   r.product_cost,
                   i.parent_code,
                   i.upload_name,
                   p.option_detail_code,
                   i.upload_path,
                   c.option_last,
                   c.cart_code
            FROM ar_cart c
            
                LEFT JOIN ar_option_detail p ON c.option_detail_code = p.option_detail_code
                LEFT JOIN ar_member m ON c.member_id = m.member_id
                LEFT JOIN ar_products r ON p.product_code = r.product_code
                LEFT JOIN ar_imgs i ON p.product_code = i.product_code
                
            WHERE c.member_id = #{memberId} AND c.cart_code = #{cartCode} AND i.img_order = 1
  	</select>
 
 
 	<!-- 구매자 쿠폰 파싱 -->
 	<select id="selectCoupon" resultType="com.ar.lighthouse.orders.service.OrdersVO">
 	SELECT m.member_id, 
 	
 	       c.coupon_content, 
 	       c.coupon_code, 
 	       c.coupon_condition, 
		   c.coupon_name, 
		   c.coupon_discount_price, 
		   c.coupon_discount_rate, 
		   c.coupon_max_price, 
		   c.coupon_min_price,
		   c.coupon_deadline, 
		   c.coupon_base, 
		   
 	       b.issue_date, 
 	       b.mycoupon_code,
		   b.end_date, 
		   b.using_date
		   
    FROM ar_member     m
    JOIN ar_coupon_box b    ON m.member_id = b.member_id
    JOIN ar_coupons    c    ON b.coupon_code = c.coupon_code
    
    WHERE m.member_id = #{memberId} 
      AND coupon_use = 'Y'
 	</select>
 	
 	<!-- 배송요청 사항 코드 -->
 	<select id="selectCode" resultType="CodeVO">
 	 SELECT * FROM AR_CODE
     WHERE MASTER_CODE = 'delivery_request'
 	</select>
 	
 	<!-- 기간 지난, 사용한 쿠폰 사용불가로 변경 -->
 	<update id="updatetNotCoupon">
 		UPDATE AR_COUPON_BOX 
 		SET coupon_use = 'N' 
 		WHERE MEMBER_ID = #{memberId} AND MYCOUPON_CODE = #{mycouponCode}
 	</update>
 	
  	<!-- 환불 받은 상품의 쿠폰 재사용 변경 -->
  	<update id="updateRefundCoupon">
  		UPDATE AR_COUPON_BOX 
 		SET coupon_use = 'Y' 
 		WHERE MEMBER_ID = #{memberId} AND MYCOUPON_CODE = #{mycouponCode}
  	</update>
  	
  	<!-- 토스페이먼츠 결제DB insert -->
  	<insert id="insertCredit">
  	INSERT INTO AR_CREDIt 
  				(
  				 PAYMENTKEY,
  				 TYPE,
  				 ORDERID,
  				 ORDERNAME,
  				 METHOD,
  				 CURRENCY,
  				 MID,
  				 BALANCEAMOUNT,
  				 TOTALAMOUNT,
  				 APPROVEDAT,
  				 ORDER_CODE
  				 )
    VAlUES (
    		#{paymentKey},
    		#{type},
    		#{orderId},
    		#{orderName}, 
    		#{method},
    		#{currency},
    		#{mId},
    		#{balanceAmount},
    		#{totalAmount},
    		#{approvedAt},
    		#{orderCode}
    		)
  	</insert>
  	<!-- 토스페이먼츠 환불 시 페이먼츠키, 환불금액 select -->
  	<select id="selectRefund" resultType="RefundVO">
  		SELECT c.paymentkey, 
  			   d.discount_price, 
  			   d.order_price, 
  			   d.payment_price,  
  			   d.mycoupon_code,
  			   p.delivery_cost
		FROM ar_orders o
		
		JOIN ar_credit c ON o.order_code = c.order_code
		JOIN ar_order_detail d ON o.order_code = d.order_code
		JOIN ar_option_detail t ON t.option_detail_code = d.option_detail_code
        JOIN ar_products p ON p.product_code = t.product_code
		WHERE d.order_detail_code = #{orderDetailCode} AND o.member_id = #{memberId} AND o.order_code = #{orderCode}
  	</select>
  	
  	<!-- 토스페이먼츠 환불테이블 DB insert -->
  	<insert id="insertRefund">
  		INSERT INTO AR_REFUND
					  		(
					  		REFUND_CODE,
					  		REFUND_TYPE,
					  		REFUND_TYPECODE,
					  		REFUND_AMOUNT,
					  		PAYMENTSKEY
					  		)
					  		
		VALUES				(
							rf_code,
							#{refundType},
							#{refundTypecode},
							#{refundAmount},
							#{paymentKey}
							)
  	</insert>
  	
  	<!-- 주문정보 저장 (배송지 등)-->
  	<insert id="insertOrderPayVO">
  		<selectKey resultType="int" keyProperty="orderCode" order="BEFORE">
			SELECT NVL(MAX(ORDER_CODE),1) + 1 
			FROM AR_ORDERS
		</selectKey>
		 INSERT INTO AR_ORDERS (
								 ORDER_CODE, 
								 MEMBER_ID,
								 ORDER_PRICE ,
								 ORDER_ADDR, 
								 ORDER_DETAILS_ADDR, 
								 RECIPIENT_NAME, 
								 RECIPIENT_TEL, 
								 REQUESTED_TERM
								 )
								 
         VALUES					(
				         		#{orderCode},
				         		#{memberId}, 
				         		#{DeliveryVO.orderPrice}, 
				         		#{DeliveryVO.orderAddr}, 
				         		#{DeliveryVO.orderDetailsAddr}, 
				         		#{DeliveryVO.recipientName},
				         		#{DeliveryVO.recipientTel},
				         		#{DeliveryVO.requestedTerm}
				         		)
  	</insert>
  	
  	<!-- 주문코드 파싱 -->
  	<select id="selectOrderCode" resultType="int">
						  	SELECT ORDER_CODE
							FROM
								(SELECT *
								FROM AR_ORDERS
								WHERE MEMBER_ID = #{memberId}
								ORDER BY ORDER_CODE DESC)
							WHERE ROWNUM = 1
  	</select>
  	
  	<!-- 주문 내역 페이지 저장 데이터 -->
  	<insert id="insertOrders">
  		<selectKey resultType="int" keyProperty="orderDetailCode" order="BEFORE">
					  SELECT NVL(MAX(ORDER_DETAIL_CODE),1) + 1 FROM AR_ORDER_DETAIL
		</selectKey>
					  INSERT INTO AR_ORDER_DETAIL
					  	      (ORDER_DETAIL_CODE,
							   ORDER_CODE,
							   OPTION_DETAIL_CODE,
							   ORDER_CNT,
							   ORDER_PRICE,
							   DISCOUNT_PRICE,
							   PAYMENT_PRICE,
							   MYCOUPON_CODE,
							   OPTION_COUPON_CHECK,
							   DELIVERY_SERVICE) 
					   VALUES					  
					   		  (#{orderDetailCode},
							   #{OrdersVO.orderCode},
							   #{OrdersVO.optionDetailCode},
							   #{OrdersVO.cartCount},
							   #{OrdersVO.orderPrice},
							   #{OrdersVO.discountPrice},
							   #{OrdersVO.paymentPrice},
							   #{OrdersVO.mycouponCode},
							   #{OrdersVO.optionCouponCheck},
							   #{OrdersVO.deliveryService})
	</insert>
	<!-- 결제 시 장바구니 비우기 -->
	<delete id="deleteCart">
							DELETE AR_CART 
							WHERE MEMBER_ID = #{memberId} AND
							CART_CODE = #{cartNum}
	</delete>
	
	<!-- 환불 credit 테이블 환불 가능 금액 업데이트 -->
	<update id="updateTossRefundAmount">
		UPDATE AR_CREDIT
		SET BALANCEAMOUNT = #{refundAmount}
		WHERE PAYMENTKEY = #{paymentKey}
	</update>
	
	<!-- 환불 credit 테이블 환불 가능 금액 업데이트 -->
	<update id="updateOrderRefundAmount">
		UPDATE AR_ORDERS
		SET ORDER_PRICE = #{refundAmount}
		WHERE ORDER_CODE = #{orderCode}
	</update>
	
  </mapper>