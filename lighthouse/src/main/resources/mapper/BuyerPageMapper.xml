<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

  <mapper namespace="com.ar.lighthouse.buyp.mapper.BuyerPageMapper">

	 <!-- 주문 목록 -->
	<select id="selectDetailList" resultType="DetailVO" parameterType="Criteria">
     WITH RankedOrderDetail AS (
        SELECT *
		FROM (
		    SELECT rownum pn,  
		    	order_cnt,
		        order_price,
		        payment_price,
		        order_status,
		        order_status_nm,
		        order_detail_code,
		        order_date,
		        delivery_number,
		        delivery_date,
		        option_detail_code,
		        order_code,
		        order_check,
		        option_last,
		        product_name,
		        product_code,
		        img_code,
		        img_order,
		        img_name,
		        upload_name,
		        img_content,
		        upload_path,
		        NVL(cancel_status, '0') cancel_status,
		        cancel_status_nm,
		        cancel_regdate,
		        NVL(return_status, '0') return_status,
		        return_status_nm,
		        return_regdate,
		        NVL(exchange_status, '0') exchange_status,
		        exchange_status_nm,
		        exchange_regdate,
		        rn
		    FROM (
            SELECT 
		        a.order_cnt,
		        a.order_price,
		        a.payment_price,
		        order_status,
		        delivery_code_name(a.order_status) AS order_status_nm,
		        a.order_detail_code,
		        a.order_date,
		        a.delivery_number,
		        a.delivery_date,
		        a.option_detail_code,
		        a.order_code,
		        a.order_check,
		        c.option_last,
		        d.product_code,
		        d.product_name,
		        e.img_code,
		        e.img_order,
		        e.img_name,
		        e.upload_name,
		        e.img_content,
		        e.upload_path,
		        cancel_status,
		        order_status_name(f.cancel_status) AS cancel_status_nm,
		        f.cancel_regdate,
		        return_status,
		        order_status_name(g.return_status) AS return_status_nm,
		        g.return_regdate,
		        exchange_status,
		        order_status_name(h.exchange_status) AS exchange_status_nm,
		        h.exchange_regdate,
		        ROW_NUMBER() OVER (PARTITION BY a.order_detail_code ORDER BY a.order_date DESC) AS rn
		    FROM 
		        ar_order_detail a
		    JOIN 
		        ar_orders b ON a.order_code = b.order_code
		    LEFT OUTER JOIN 
		        ar_option_detail c ON a.option_detail_code = c.option_detail_code
		    LEFT OUTER JOIN 
		        ar_products d ON c.product_code = d.product_code
		    LEFT OUTER JOIN 
		        ar_imgs e ON e.product_code = d.product_code
		    LEFT OUTER JOIN 
		        ar_cancel f ON a.order_detail_code = f.order_detail_code 
		    LEFT OUTER JOIN 
		        ar_return g ON a.order_detail_code = g.order_detail_code
		    LEFT OUTER JOIN 
		        ar_exchange h ON a.order_detail_code = h.order_detail_code
		    WHERE 
		        b.member_id = #{memberId}
		        and e.img_order = 0
		    ORDER BY a.order_detail_code DESC) pg
		    <![CDATA[
        WHERE rownum <= #{cri.pageNum} * #{cri.amount}
        ]]>
    )
    WHERE pn > (#{cri.pageNum} - 1) * #{cri.amount}
    )
    SELECT *
		FROM 
		    RankedOrderDetail
		WHERE 
		    rn = 1
	</select>
     
     <select id="selectDetailCnt" resultType="int">
     SELECT count(*)
	 FROM ar_order_detail
	 WHERE order_detail_code > 0
     </select>
     
     <!-- 주문목록 옵션 -->
     <select id="selectOptionList" resultType="DetailVO">
		WITH RankedOrderDetail AS (
		    SELECT 
		        a.order_cnt,
		        a.order_price,
		        a.payment_price,
		        order_status,
		        delivery_code_name(a.order_status) AS order_status_nm,
		        a.order_detail_code,
		        a.order_date,
		        a.delivery_number,
		        a.delivery_date,
		        a.option_detail_code,
		        a.order_code,
		        a.order_check,
		        c.option_last,
		        d.product_code,
		        d.product_name,
		        d.product_code,
		        e.img_code,
		        e.img_order,
		        e.img_name,
		        e.upload_name,
		        e.img_content,
		        NVL(cancel_status, '0') cancel_status,
		        order_status_name(f.cancel_status) AS cancel_status_nm,
		        f.cancel_regdate,
		        NVL(return_status, '0') return_status,
		        order_status_name(g.return_status) AS return_status_nm,
		        g.return_regdate,
		        NVL(exchange_status, '0') exchange_status,
		        order_status_name(h.exchange_status) AS exchange_status_nm,
		        h.exchange_regdate,
		        e.upload_path,
		        ROW_NUMBER() OVER (PARTITION BY a.order_detail_code ORDER BY a.order_date DESC) AS rn
		    FROM 
		        ar_order_detail a
		    JOIN 
		        ar_orders b ON a.order_code = b.order_code
		    LEFT OUTER JOIN 
		        ar_option_detail c ON a.option_detail_code = c.option_detail_code
		    LEFT OUTER JOIN 
		        ar_products d ON c.product_code = d.product_code
		    LEFT OUTER JOIN 
		        ar_imgs e ON e.product_code = d.product_code
		    LEFT OUTER JOIN 
		        ar_cancel f ON a.order_detail_code = f.order_detail_code 
		    LEFT OUTER JOIN 
		        ar_return g ON a.order_detail_code = g.order_detail_code
		    LEFT OUTER JOIN 
		        ar_exchange h ON a.order_detail_code = h.order_detail_code
		    WHERE 
		        b.member_id = #{memberId}
		        and e.img_order = 0
		    <choose>
		    	<when test="searchKey == 'payment_price'">
		    		AND a.payment_price like '%'||#{searchValue}||'%'
		    	</when>
		    	<when test="searchKey == 'order_date'">
		    		AND a.order_date like '%'||#{searchValue}||'%'
		    	</when>
		    	<when test="searchKey == 'order_code'">
		    		AND a.order_code like '%'||#{searchValue}||'%'
		    	</when>
		    	<when test="searchKey == 'order_detail_code'">
		    		AND a.order_detail_code like '%'||#{searchValue}||'%'
		    	</when>
		    	<when test="searchKey == 'product_name'">
		    		AND d.product_name like '%'||#{searchValue}||'%'
		    	</when>
		    	<when test="searchKey == 'order_code'">
		    		AND a.order_code like '%'||#{searchValue}||'%'
		    	</when>
		    </choose>
		    <if test="fromDate != null and toDate != null">
				AND a.order_date BETWEEN #{fromDate} AND #{toDate} + 1
			</if>
				ORDER BY a.order_date DESC
		)
		SELECT *
		FROM 
		    RankedOrderDetail
		WHERE 
		    rn = 1
     </select>

  
     <!-- 개인정보 -->
     <select id="selectBuyInfo" resultType="BuyInfoVO" parameterType="String">
        SELECT member_name
              , member_email
              , member_pw
              , member_addr
              , member_details_addr
              , member_tel
              , member_birth
      FROM ar_member
      WHERE member_id = #{memberId}
      
     </select>
     
     
     <!-- 취소/반품/교환 여부 -->
   <select id="selectTradeList" resultType="TradeVO" parameterType="String">
      SELECT b.cancel_code
             , b.cancel_status
             , b.cancel_regdate
             , a.order_detail_code
             , a.order_status
             , a.order_date
             , a.order_cnt
             , a.payment_price
             , c.return_status
             , c.return_regdate
             , d.exchange_status
             , d.exchange_regdate
             , f.product_code
             , f.product_name
             , f.product_cost
             , e.option_detail_code
            , h.img_name
            , h.img_content
            , h.upload_name
      FROM ar_order_detail a
      LEFT OUTER JOIN ar_cancel b ON a.order_detail_code = b.order_detail_code 
      LEFT OUTER JOIN ar_return c ON a.order_detail_code = c.order_detail_code
      LEFT OUTER JOIN ar_exchange d ON a.order_detail_code = d.order_detail_code
      LEFT OUTER JOIN ar_option_detail e ON a.option_detail_code = e.option_detail_code
      LEFT OUTER JOIN ar_products f ON  e.product_code = f.product_code
      LEFT OUTER JOIN ar_orders g ON g.order_code = a.order_code
      LEFT OUTER JOIN ar_imgs h ON f.product_code = h.parent_code
      WHERE g.member_id = {#memberId}   
   </select>
   
   <!-- 개인정보 수정 -->
   <update id="updateInfo" parameterType="BuyInfoVO">
      UPDATE ar_member 
      SET 
      <if test="memberPw != null and memberPw !=''">
            member_pw = #{memberPw},
      </if>
           member_addr = #{memberAddr}
          , member_details_addr = #{memberDetailsAddr}
          , member_email = #{memberEmail}
          , member_tel = #{memberTel}
      WHERE member_id = #{memberId}
   </update>
   
   
   <!-- 쿠폰 (페이징) -->
   <select id="selectCouponList" resultType="CouponVO" parameterType="Criteria">
       SELECT *
		FROM ( select rownum rn, pg.* 
			FROM (
				SELECT coupon_code
		              , coupon_name
		              , coupon_content
		              , coupon_deadline
		              , coupon_condition
		              , coupon_min_price
		              , coupon_max_price
		              , coupon_discount_price
		              , coupon_discount_rate
		              , using_date
		              , end_date
		              , issue_date
		              , coupon_use
		         FROM ar_my_coupon
		         WHERE member_id = #{memberId}
		         and coupon_use = 'Y'
		         ORDER BY coupon_code DESC) pg
         <![CDATA[
        WHERE rownum <= #{cri.pageNum} * #{cri.amount}
        ]]>
    )
    WHERE rn > (#{cri.pageNum} - 1) * #{cri.amount}
   </select>
   
   <!-- 쿠폰 갯수(페이징)-->
   <select id="getCouponCnt" resultType="int">
   	SELECT count(*)
  	FROM ar_coupons
  	WHERE coupon_code > 0
   </select>
   
   <!-- 문의 내역 -->
   <select id="selectMyInquiryList" resultType="MyInquiryVO" parameterType="String">
      SELECT custom_inquiry_code
           , custom_inquiry_title
           , custom_inquiry_content
           , custom_inquiry_regdate
           , custom_inquiry_answer
           , custom_inquiry_answer_status
      FROM ar_custom_inquiry
      WHERE member_id = #{memberId}
      Order by custom_inquiry_code desc
   </select>
   
   <select id="getInqCnt" resultType="int">
   	SELECT count(*)
	FROM ar_custom_inquiry
	WHERE custom_inquiry_code > 0
   </select>
   
   <!-- 찜 내역 (페이징) -->
   <select id="selectWishList" resultType="WishVO" parameterType="Criteria">
        SELECT *
		FROM (
		    SELECT rownum rn, pg.*
		    FROM (
		        SELECT a.favorite_code
		            , a.member_id
		            , b.product_name
		            , b.product_cost
		            , b.product_code
		            , b.sale_price
		            , c.upload_name
		            , c.upload_path
		            , c.img_content
		        FROM ar_favorite a
		        LEFT OUTER JOIN ar_products b ON a.product_code = b.product_code
		        LEFT OUTER JOIN ar_imgs c ON a.product_code = c.product_code
		        WHERE a.member_id = #{memberId}
		        AND c.img_order = '0'
		        ORDER BY a.favorite_code DESC
		    ) pg
		    <![CDATA[
        WHERE rownum <= #{cri.pageNum} * #{cri.amount}
        ]]>
        ORDER BY pg.favorite_code DESC
    )
    WHERE rn > (#{cri.pageNum} - 1) * #{cri.amount}
   </select>
   
   <!-- 찜 갯수 (페이징) -->
   <select id="getPageCnt" resultType="int">
   	SELECT count(*)
  	FROM ar_favorite
  	WHERE FAVORITE_CODE > 0
   </select>
   
   <!-- 취소 상세 -->
   <select id="selectCancelList" resultType="BuyCancelVO" parameterType="String">
      SELECT a.cancel_code
           , a.cancel_reason
           , a.cancel_regdate
           , a.cancel_retract_date
           , order_status_name(a.cancel_status) cancel_status
           , a.cancel_date
           , b.c_detail_reason
           , b.cancel_rejection_reason
           , c.order_cnt
           , c.payment_price
           , c.order_detail_code
           , d.option_detail_code
           , e.product_name
           , f.member_id
           , f.order_code
           , g.upload_name
           , g.img_content
           , g.upload_path
           , g.img_order
      FROM ar_cancel a
      LEFT JOIN ar_cancel_reject b ON a.CANCEL_REJECTION_REASON = b.CANCEL_REJECTION_REASON
      LEFT JOIN ar_order_detail c ON c.order_detail_code = a.order_detail_code
      LEFT JOIN ar_option_detail d ON d.option_detail_code = c.option_detail_code
      LEFT JOIN ar_products e ON e.product_code = d.product_code
      LEFT JOIN ar_orders f ON c.order_code = f.order_code
      LEFT JOIN ar_imgs g ON g.product_code = e.product_code
      WHERE f.member_id = #{memberId}
      and g.img_order = '0'
      ORDER BY a.cancel_regdate DESC
   </select>
   
   <!-- 반품 상세 -->
   <select id="selectReturnList" resultType="BuyReturnVO" parameterType="String">
      select a.return_code
           , a.return_reason
           , a.return_regdate
           , a.return_retractdate
           , a.return_processdate
           , order_status_name(a.return_status) return_status
           , b.order_detail_code
           , b.order_code
           , b.order_cnt
           , b.payment_price
           , c.option_detail_code
           , d.product_name 
           , e.member_id
           , f.upload_name
           , f.img_content
           , f.upload_path
           , f.img_order
      FROM ar_return a
      LEFT JOIN ar_order_detail b ON a.order_detail_code = b.order_detail_code
      LEFT JOIN ar_option_detail c ON b.option_detail_code = c.option_detail_code
      LEFT JOIN ar_products d ON d.product_code = c.product_code
      LEFT JOIN ar_orders e ON e.order_code = b.order_code
      LEFT JOIN ar_imgs f ON f.product_code = d.product_code
      WHERE e.member_id = #{memberId}
      AND f.img_order = '0'
      ORDER BY a.return_regdate DESC
   </select>
   
   <!-- 교환 상세 -->
   <select id="selectExchangeList" resultType="BuyExchangeVO" parameterType="String">
      SELECT a.exchange_code
           , a.exchange_reason
           , a.exchange_regdate
           , a.exchange_retractdate
           , order_status_name(a.exchange_status) exchange_status
           , a.exchange_processingdate
           , a.exchange_addr
           , a.delivery_number
           , b.order_detail_code
           , b.order_cnt
           , b.payment_price
           , c.option_detail_code
           , d.product_name
           , e.order_code
           , e.member_id
           , f.upload_name
           , f.img_content
           , f.upload_path
           , f.img_order
      FROM ar_exchange a
      LEFT JOIN ar_order_detail b ON a.order_detail_code = b.order_detail_code
      LEFT JOIN ar_option_detail c ON c.option_detail_code = b.option_detail_code
      LEFT JOIN ar_products d ON d.product_code = c.product_code
      LEFT JOIN ar_orders e ON e.order_code = b.order_code
      LEFT JOIN ar_imgs f ON f.product_code = d.product_code
	  WHERE e.member_id = #{memberId}
	  AND f.img_order = '0'
	  ORDER BY a.exchange_regdate DESC
	</select>
	
	<!-- 취소 신청 넘어가는 값 -->
	<select id="cancelCodePage" resultType="CodeVO">
		SELECT b.order_code
		     , a.order_detail_code
		     , d.product_name
		     , b.member_id
		     , a.payment_price
		FROM ar_order_detail a
		JOIN ar_orders b ON a.order_code = b.order_code
		JOIN ar_option_detail c   ON c.option_detail_code = a.option_detail_code
		JOIN ar_products d ON d.product_code = c.product_code
	   WHERE a.order_detail_code = #{orderDetailCode}
	</select>
	
	<!-- 반품 신청 넘어가는 값 -->
	<select id="returnCodePage" resultType="CodeVO">
		SELECT b.order_code
		     , a.order_detail_code
		     , d.product_name
		     , b.member_id
		     , a.payment_price
		FROM ar_order_detail a
		LEFT JOIN ar_orders b ON a.order_code = b.order_code
		LEFT JOIN ar_option_detail c ON c.option_detail_code = a.option_detail_code
		LEFT JOIN ar_products d ON d.product_code = c.product_code
		WHERE a.order_detail_code = #{orderDetailCode}
	</select>
	
	<!-- 교환 신청 넘어가는 값 -->
	<select id="exchangeCodePage" resultType="CodeVO">
		SELECT b.order_code
		     , a.order_detail_code
		     , d.product_name
		     , b.member_id
		     , a.payment_price
		FROM ar_order_detail a
		LEFT JOIN ar_orders b ON a.order_code = b.order_code
		LEFT JOIN ar_option_detail c ON c.option_detail_code = a.option_detail_code
		LEFT JOIN ar_products d ON d.product_code = c.product_code
		WHERE a.order_detail_code=#{orderDetailCode}
	</select>
	
	<!--취소 코드  -->
	<select id="selectCancelCode" resultType="CodeVO" parameterType="String">
		SELECT master_code
		     , code_id
		     , code_name
		FROM ar_code 
		WHERE master_code = 'cancel_reason'
	</select>
	
	<!--반품 코드  -->
	<select id="selectReturnCode" resultType="CodeVO" parameterType="String">
		SELECT master_code
		     , code_id
		     , code_name
		FROM ar_code 
		WHERE master_code = 'return_reason'
	</select>
	
	<!--교환 코드 -->
	<select id="selectExchangeCode" resultType="CodeVO" parameterType="String">
		SELECT master_code
		     , code_id
		     , code_name
		FROM ar_code 
		WHERE master_code = 'exchange_reason'
	</select>
	
	<!--취소 신청  -->
	<insert id="insertCancel" parameterType="BuyCancelVO">
		INSERT INTO ar_cancel 
				(CANCEL_CODE
				, ORDER_DETAIL_CODE
				, CANCEL_REASON
				)
		VALUES (ca_code
				, #{orderDetailCode}
				, #{cancelReason}
				)
	</insert>
	
	<!--반품 신청  -->
	<insert id="insertReturn" parameterType="BuyReturnVO">
		INSERT INTO ar_return 
				(RETURN_CODE
			   , ORDER_DETAIL_CODE
			   , RETURN_REASON
			   )
		VALUES (re_code
			   , #{orderDetailCode}
			   , #{returnReason}
			   )
	</insert>
	
	<!-- 교환 신청 -->
	<insert id="insertExchange" parameterType="BuyExchangeVO">
		INSERT INTO ar_exchange 
				(EXCHANGE_CODE
				, ORDER_DETAIL_CODE
				, EXCHANGE_REASON
				, EXCHANGE_ADDR
				)
		VALUES (ex_code
				, #{orderDetailCode}
				, #{exchangeReason}
				, #{exchangeAddr}
				)
	</insert>
	
	<!-- 주문 취소 -->
	<delete id="deleteCancel" parameterType="BuyCancelVO">
		DELETE ar_cancel
		WHERE order_detail_code = #{orderDetailCode}
	</delete>
	
	<!-- 반품 취소 -->
	<delete id="deleteReturn" parameterType="BuyReturnVO">
		DELETE ar_return 
		WHERE order_detail_code = #{orderDetailCode}
	</delete>
	
	<!-- 교환 취소 -->
	<delete id="deleteExchange" parameterType="BuyExchangeVO">
		DELETE ar_exchange
		WHERE order_detail_code = #{orderDetailCode}
	</delete>
	
	<!-- 찜 취소 -->
	<delete id="deleteWish" parameterType="WishVO">
		DELETE ar_favorite
		WHERE favorite_code = #{favoriteCode}
	</delete>
	
	
	<!-- 찜 목록으로 -->
	<insert id="insertWish" parameterType="WishVO">
		<selectKey resultType="int" keyProperty="favoriteCode" order="BEFORE">
	         SELECT NVL(MAX(favorite_code),0)+1
	         FROM ar_favorite
      	</selectKey>
		      INSERT INTO ar_favorite 
		      	(
			      favorite_code
			      , product_code
			      , member_id
		      	)
		      VALUES
		      	(
			        #{favoriteCode}
			      , #{productCode}
			      , #{memberId}
		      	)
	</insert>
	
	<select id="checkWish" resultType="int">
		select count(*) 
		from ar_favorite
		WHERE member_id = #{memberId}
		AND product_code = #{productCode}
	</select>
  </mapper>