<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ar.lighthouse.product.mapper.ProductMapper">


   <!-- 결과를 매핑하기 위한 resultMap -->
   <resultMap type="ProductVO" id="selectProductList">
      <result column="member_id" property="memberId" />
      <result column="product_code" property="productCode" />
      <result column="product_name" property="productName" />
      <result column="delivery_cost" property="deliveryCost" />
      <result column="product_regdate" property="productRegdate" />
      <result column="product_cost" property="productCost" />
      <result column="product_exstatus" property="productExStatus" />
      <result column="sale_price" property="salePrice" />
      <collection property="optionDetail" resultMap="optionList" />
   </resultMap>

   <!-- OptionVO를 매핑하기 위한 resultMap -->
   <resultMap type="OptionDetailVO" id="optionList">
      <result column="option_count" property="optionCount" />
      <result column="option_price" property="optionPrice" />
   </resultMap>

   <select id="selectProductList" resultMap="selectProductList">
      SELECT *
      FROM
              ar_products p
      left OUTER JOIN ( SELECT product_code,
                    SUM(option_count) AS
                    option_count
                    FROM ar_option_detail
                    GROUP BY product_code
                    ) d
      ON p.product_code = d.product_code
      WHERE p.member_id = #{memberId}
      ORDER BY product_regdate DESC
   </select>



   <!-- 옵션선택 -->
   <resultMap type="ProductVO" id="selectOptionProduct">
      <result column="product_code" property="productCode" />
      <result column="product_name" property="productName" />
      <result column="delivery_cost" property="deliveryCost" />
      <result column="product_regdate" property="productRegdate" />
      <result column="product_exstatus" property="productExStatus" />
      <result column="product_cost" property="productCost" />
      <result column="sale_price" property="salePrice" />
      <collection property="optionDetail" resultMap="optionSelectList" />
	</resultMap>

	<resultMap type="OptionDetailVO" id="optionSelectList">
	   <result column="option_count" property="optionCount" />
	   <result column="option_price" property="optionPrice" />
	</resultMap>
  <select id="selectOptionProduct" resultMap="selectOptionProduct">
    SELECT *
    FROM ar_products p
    left OUTER JOIN (
        SELECT product_code, SUM(option_count) AS option_count
        FROM ar_option_detail
        GROUP BY product_code
    ) d
    ON p.product_code = d.product_code
    WHERE p.member_id = #{memberId}
    <choose>
        <when test="optionVal == '상품명순'">
            ORDER BY product_name
        </when>
        <when test="optionVal == '상품등록일순'">
            ORDER BY product_regdate
        </when>
    </choose>
    <if test="optionVal == '전시중'">
        AND product_exstatus = 'Y'
    </if>
    <if test="optionVal == '전시중지'">
        AND product_exstatus = 'N'
    </if>
    ORDER BY product_regdate DESC
</select>



   <!-- 주문목록 -->
   <resultMap type="DetailVO" id="selectOrderDetail">
      <result column="member_id" property="memberId" />
      <result column="member_name" property="memberName" />
      <result column="member_email" property="memberEmail"/>
      <result column="product_name" property="productName" />
      <result column="order_status" property="orderStatus" />
      <result column="order_date" property="orderDate" />
      <result column="order_detail_code" property="orderDetailCode" />
      <result column="order_cnt" property="orderCnt" />
      <result column="requested_term" property="requestedTerm" />
      <result column="delivery_service" property="deliveryService" />
      <result column="delivery_number" property="deliveryNumber" />
      <result column="delivery_start" property="deliveryStart" />
      <association property="optionDetail" resultMap="optionList2" />
   </resultMap>

   <!-- OptionVO를 매핑하기 위한 resultMap -->
   <resultMap type="OptionDetailVO" id="optionList2">
      <result column="option_last" property="optionLast" />
      <result column="product_code" property="productCode" />

   </resultMap>
   <select id="selectOrderDetail" resultMap="selectOrderDetail">
      SELECT
      o.order_detail_code,
      delivery_code_name(o.order_status) AS
      order_status,
      p.product_name,
      x.option_last,
      r.requested_term,
      o.order_cnt,
      o.delivery_service,
      o.delivery_number,
      o.delivery_start,
      m.member_name,
      m.member_id,
      m.member_email
      FROM
      ar_order_detail o
	      JOIN
	      		ar_orders r ON
	      o.order_code = r.order_code
	      JOIN
	      		ar_option_detail x ON o.option_detail_code = x.option_detail_code
	      JOIN
	      		ar_products p ON x.product_code = p.product_code
	      JOIN
	      		ar_member m ON m.member_id = r.member_id
      WHERE p.member_id = #{memberId}
      AND o.order_check != 'N'
      ORDER BY o.order_date DESC
   </select>

<!-- 주문상태에 따른 List-->
  

   <select id="selectStatusList" resultMap="selectOrderDetail">
      SELECT
      o.order_detail_code,
      delivery_code_name(o.order_status) AS
      order_status,
      p.product_name,
      x.option_last,
      r.requested_term,
      o.order_cnt,
      o.delivery_service,
      o.delivery_number,
      o.delivery_start,
      m.member_name,
      m.member_id,
      m.member_email
      FROM
      ar_order_detail o
	      JOIN
	      		ar_orders r ON
	      o.order_code = r.order_code
	      JOIN
	      		ar_option_detail x ON o.option_detail_code = x.option_detail_code
	      JOIN
	      		ar_products p ON x.product_code = p.product_code
	      JOIN
	      		ar_member m ON m.member_id = r.member_id
      WHERE p.member_id = #{memberId}
      AND o.order_status = #{orderStatus}
      AND o.order_status != 11
      ORDER BY o.order_date DESC
   </select>




<!-- 판매자 직접 취소처리 -->
<update id="deleteOrderSelf">
update ar_order_detail
SET order_check= 'N'
WHERE order_detail_code = #{orderDetailCode}
</update>


<!-- 수정 -->
<resultMap type="ProductVO" id="modifyProduct">
      <result column="member_id" property="memberId" />
      <result column="product_code" property="productCode" />
      <result column="product_name" property="productName" />
      <result column="category_code" property="categoryCode" />
      <result column="delivery_cost" property="deliveryCost" />
      <result column="product_regdate" property="productRegdate" />
      <result column="product_cost" property="productCost" />
      <result column="product_exstatus" property="productExStatus" />
      <result column="product_content" property="productContent" />
      <result column="product_location" property="productLocation" />
      <result column="product_origin" property="productOrigin" />
      <result column="product_makeorigin" property="productMakeorigin" />
      <result column="return_cost" property="returnCost" />
      <result column="exchange_cost" property="exchangeCost" />
      <result column="delivery_service" property="deliveryService" />
      <result column="product_updatedate" property="productUpdatedate" />
      <result column="delivery_service" property="deliveryService" />
      <result column="product_brand" property="productBrand" />
      <result column="sale_price" property="salePrice" />
      <collection property="optionDetail" resultMap="modifyForm" />
      <collection property="option" resultMap="midifiOption" />
      <collection property="category" resultMap="categoryList"/>
   </resultMap>
   <!-- OptionVO를 매핑하기 위한 resultMap -->
   <resultMap type="OptionDetailVO" id="modifyForm">
      <result column="option_detail_code" property="optionDetailCode" />
      <result column="option_last" property="optionLast" />
      <result column="min_order" property="minOrder" />
      <result column="max_order" property="MaxOrder" />
      <result column="option_count" property="optionCount" />
      <result column="option_price" property="optionPrice" />
   </resultMap>
   <resultMap type="OptionVO" id="midifiOption">
        <result column="option_code" property="optionCode" />
     <result column="option_name" property="optionName" />
     <result column="option_value" property="optionValue" />
   </resultMap>
   <resultMap type="CategoryVO" id="categoryList">
        <result column="parent_category_code" property="parentCategoryCode" />
     <result column="category_name" property="categoryName" />
     <result column="category_level" property="categoryLevel" />
     <result column="category_code" property="categoryCode" />
     <result column="parent_category_name" property="parentCategoryName" />
     <result column="grandparent_category_name" property="grandparentCategoryName" />
     <result column="most_category_name" property="mostCategoryName" />
   </resultMap>
<select id="modifyProduct" resultMap="modifyProduct">
   SELECT 
    p.*, od.*, o.*, c.category_code, c.category_name, c.parent_category_code, c.category_level,
    (SELECT pc.category_name 
     FROM ar_category pc 
     WHERE pc.category_code = c.parent_category_code) AS parent_category_name,
    (SELECT ppc.category_name 
     FROM ar_category ppc 
     WHERE ppc.category_code = 
           (SELECT pc.parent_category_code 
            FROM ar_category pc 
            WHERE pc.category_code = c.parent_category_code)) AS grandparent_category_name,
    (SELECT gpc.category_name 
     FROM ar_category gpc 
     WHERE gpc.category_code = 
           (SELECT ppc.parent_category_code 
            FROM ar_category ppc 
            WHERE ppc.category_code = 
                  (SELECT pc.parent_category_code 
                   FROM ar_category pc 
                   WHERE pc.category_code = c.parent_category_code))) AS most_category_name
FROM 
    ar_products p
JOIN 
    ar_option_Detail od ON p.product_code = od.product_code
JOIN 
    ar_option o ON o.product_code = p.product_code
JOIN 
    ar_category c ON c.category_code = p.category_code
WHERE p.product_code = #{productCode}
</select>

   <!-- select주문 -->
   <resultMap type="DetailVO" id="selectOrderOptionList">
      <result column="member_id" property="memberId" />
      <result column="member_name" property="memberName" />
      <result column="product_name" property="productName" />
      <result column="order_status" property="orderStatus" />
      <result column="order_date" property="orderDate" />
      <result column="order_detail_code" property="orderDetailCode" />
      <result column="order_cnt" property="orderCnt" />
      <result column="requested_term" property="requestedTerm" />
      <result column="delivery_service" property="deliveryService" />
      <result column="delivery_number" property="deliveryNumber" />
      <result column="delivery_start" property="deliveryStart" />
      <association property="optionDetail" resultMap="optionList3" />
   </resultMap>

   <!-- OptionVO를 매핑하기 위한 resultMap -->
   <resultMap type="OptionDetailVO" id="optionList3">
      <result column="option_last" property="optionLast" />
      <result column="product_code" property="productCode" />

   </resultMap>
   <select id="selectOrderOptionList"
      resultMap="selectOrderOptionList">

      SELECT
      o.order_detail_code,
      p.product_name,
      delivery_code_name(o.order_status) AS order_status,
      x.option_last,
      r.requested_term,
      o.order_cnt,
      o.delivery_service,
      o.delivery_number,
      o.delivery_start,
      o.order_date,
      m.member_name
      FROM
      ar_order_detail o
      JOIN
      ar_orders r ON o.order_code = r.order_code
      JOIN
      ar_option_detail x ON o.option_detail_code = x.option_detail_code
      JOIN
      ar_products p ON
      x.product_code = p.product_code
      JOIN
      ar_member m ON m.member_id =
      r.member_id
      WHERE p.member_id = #{memberId}
      <choose>
         <when test="searchKey == 'member_name'">
            AND m.member_name like '%'||#{searchValue}||'%'
         </when>
         <when test="searchKey == 'member_id'">
            AND m.member_id like '%'||#{searchValue}||'%'
         </when>
         <when test="searchKey == 'member_tel'">
            AND m.member_tel like '%'||#{searchValue}||'%'
         </when>
         <when test="searchKey == 'product_code'">
            AND p.product_code like '%'||#{searchValue}||'%'
         </when>
         <when test="searchKey == 'delivery_number'">
            AND o.delivery_number like '%'||#{searchValue}||'%'
         </when>
      </choose>
      <if test="fromDate != null">
         AND o.order_date BETWEEN #{fromDate} AND #{toDate}
      </if>
      ORDER BY o.order_date DESC
   </select>


   <!-- 취소목록 -->
   <select id="selectCancelList" resultType="CancelVO">
      select
      c.cancel_code
      , d.order_detail_code
      , p.product_name
      , delivery_code_name(d.order_status) AS order_status
      , c.cancel_reason
      , o.charge_date
      , c.cancel_regdate
      , m.member_name
      , m.member_id
      , o.order_code
      FROM ar_cancel c
      JOIN
      ar_order_detail d ON c.order_detail_code = d.order_detail_code
      JOIN ar_orders o
      ON d.order_code = o.order_code
      JOIN ar_option_detail z
      ON z.option_detail_code = d.option_detail_code
      JOIN ar_products p
      ON p.product_code = z.product_code
      JOIN ar_member m
      ON m.member_id = o.member_id
      WHERE p.member_id = #{memberId}
   </select>

   <update id="updateCancelList">
      update ar_cancel
      set cancel_status = 'N'
      WHERE cancel_code = #{cancelCode}
   </update>
   


   <!-- 석연 : 취소 승인 시 Y로 변경 -->
   <update id="updateCancelOk">
	  update ar_cancel
      set cancel_status = 'Y'  
      WHERE cancel_code = #{cancelCode}    
   </update>
   

   <!-- 취소검색목록 -->
   <select id="cancelOptionList" resultType="CancelVO">
      select
      c.cancel_code
      , d.order_detail_code
      , p.product_name
      , delivery_code_name(d.order_status) AS order_status
      , c.cancel_reason
      , o.charge_date
      , c.cancel_regdate
      , m.member_name
      , m.member_id
      , o.order_code
      FROM ar_cancel c
      JOIN
      ar_order_detail d ON c.order_detail_code = d.order_detail_code
      JOIN ar_orders o
      ON d.order_code = o.order_code
      JOIN ar_option_detail z
      ON z.option_detail_code = d.option_detail_code
      JOIN ar_products p
      ON p.product_code = z.product_code
      JOIN ar_member m
      ON m.member_id = o.member_id
      WHERE p.member_id = #{memberId}
      <choose>
         <when test="searchKey == 'member_name'">
            AND m.member_name like '%'||#{searchValue}||'%'
         </when>
         <when test="searchKey == 'member_id'">
            AND m.member_id like '%'||#{searchValue}||'%'
         </when>
         <when test="searchKey == 'member_tel'">
            AND m.member_tel like '%'||#{searchValue}||'%'
         </when>
         <when test="searchKey == 'product_code'">
            AND p.product_code like '%'||#{searchValue}||'%'
         </when>
         <when test="searchKey == 'delivery_number'">
            AND o.delivery_number like '%'||#{searchValue}||'%'
         </when>
      </choose>
      <if test="fromDate != null">
         AND o.order_date BETWEEN #{fromDate} AND #{toDate}
      </if>
   </select>


   <!-- 교환목록 -->
   <select id="selectExchangeList" resultType="ExchangeVO">
      select
      e.exchange_code
      , d.order_detail_code
      , e.exchange_status
      , p.product_name
      , delivery_code_name(d.order_status) AS order_status
      , e.exchange_reason
      , o.charge_date
      , e.exchange_regdate
      , m.member_name
      FROM ar_exchange e
      JOIN ar_order_detail d ON e.order_detail_code = d.order_detail_code
      JOIN ar_orders o ON d.order_code = o.order_code
      JOIN ar_option_detail z ON
      z.option_detail_code = d.option_detail_code
      JOIN ar_products p ON p.product_code =
      z.product_code
      JOIN ar_member m ON m.member_id = o.member_id
      WHERE p.member_id = #{memberId}
   </select>

   <!-- 교환검색 -->
   <select id="exchangeSeaList" resultType="ExchangeVO">
      select e.exchange_code
      , d.order_detail_code
      , e.exchange_status
      , p.product_name
      , delivery_code_name(d.order_status) AS order_status
      , e.exchange_reason
      , o.charge_date
      , e.exchange_regdate
      , m.member_name
      FROM ar_exchange e
      JOIN ar_order_detail d ON e.order_detail_code = d.order_detail_code
      JOIN ar_orders o ON d.order_code = o.order_code
      JOIN ar_option_detail z ON
      z.option_detail_code = d.option_detail_code
      JOIN ar_products p ON p.product_code =
      z.product_code
      JOIN ar_member m ON m.member_id = o.member_id
      WHERE p.member_id = #{memberId}
      <choose>
         <when test="searchKey == 'member_name'">
            AND m.member_name like '%'||#{searchValue}||'%'
         </when>
         <when test="searchKey == 'member_id'">
            AND m.member_id like '%'||#{searchValue}||'%'
         </when>
         <when test="searchKey == 'member_tel'">
            AND m.member_tel like '%'||#{searchValue}||'%'
         </when>
         <when test="searchKey == 'product_code'">
            AND p.product_code like '%'||#{searchValue}||'%'
         </when>
         <when test="searchKey == 'delivery_number'">
            AND o.delivery_number like '%'||#{searchValue}||'%'
         </when>
      </choose>
      <if test="fromDate != null">
         AND o.order_date BETWEEN #{fromDate} AND #{toDate}
      </if>
   </select>

   <!-- 반품검색 -->

   <select id="returnSeaList" resultType="ExchangeVO">
      select r.return_code
      , r.return_status
      , d.order_detail_code
      , p.product_name
      , delivery_code_name(d.order_status) AS order_status
      , r.return_reason
      , o.charge_date
      , r.return_regdate
      , m.member_name
      FROM ar_return r
      JOIN
      ar_order_detail d ON r.order_detail_code = d.order_detail_code
      JOIN
      ar_orders o ON d.order_code = o.order_code
      JOIN ar_option_detail z ON
      z.option_detail_code = d.option_detail_code
      JOIN ar_products p ON p.product_code =
      z.product_code
      JOIN ar_member m ON m.member_id = o.member_id
      WHERE p.member_id = #{memberId}
      <choose>
         <when test="searchKey == 'member_name'">
            AND m.member_name like '%'||#{searchValue}||'%'
         </when>
         <when test="searchKey == 'member_id'">
            AND m.member_id like '%'||#{searchValue}||'%'
         </when>
         <when test="searchKey == 'member_tel'">
            AND m.member_tel like '%'||#{searchValue}||'%'
         </when>
         <when test="searchKey == 'product_code'">
            AND p.product_code like '%'||#{searchValue}||'%'
         </when>
         <when test="searchKey == 'delivery_number'">
            AND o.delivery_number like '%'||#{searchValue}||'%'
         </when>
      </choose>
      <if test="fromDate != null">
         AND o.order_date BETWEEN #{fromDate} AND #{toDate}
      </if>
   </select>



   <!-- 반품목록 -->
   <select id="selectReturnList" resultType="ExchangeVO">
      select r.return_code
      , r.return_status
      , d.order_detail_code
      , p.product_name
      , delivery_code_name(d.order_status) AS order_status
      , r.return_reason
      , o.charge_date
      , r.return_regdate
      , m.member_name
      FROM ar_return r
      JOIN
      ar_order_detail d ON r.order_detail_code = d.order_detail_code
      JOIN
      ar_orders o ON d.order_code = o.order_code
      JOIN ar_option_detail z ON
      z.option_detail_code = d.option_detail_code
      JOIN ar_products p ON p.product_code =
      z.product_code
      JOIN ar_member m ON m.member_id = o.member_id
      WHERE p.member_id = #{memberId}
      ORDER BY
      order_detail_code desc
   </select>

   <!-- 판매자 상품 문의 -->
   <select id="selectSellerInquiry" resultType="ProductInquiryVO">
      select
      p.product_code,p.product_name,
      i.que_content,m.member_id,i.que_regdate,i.que_ans,i.que_code,i.member_id
      from
      ar_products p
      JOIN ar_inquiry i ON p.product_code = i.product_code
      JOIN
      ar_member m ON m.member_id = i.member_id
      WHERE p.member_id= #{memberId}
   </select>

<!-- 상품 문의 검색 -->
   <select id="selectSeaInquiry" resultType="ProductInquiryVO">
      select
      p.product_code,p.product_name,
      i.que_content,m.member_id,i.que_regdate,i.que_ans,i.que_code,i.member_id
      from
      ar_products p
      JOIN ar_inquiry i ON p.product_code = i.product_code
      JOIN
      ar_member m ON m.member_id = i.member_id
      WHERE p.member_id= #{memberId}
      <choose>
         <when test="searchKey == 'member_name'">
            AND m.member_name like '%'||#{searchValue}||'%'
         </when>
         <when test="searchKey == 'member_id'">
            AND m.member_id like '%'||#{searchValue}||'%'
         </when>
         <when test="searchKey == 'product_code'">
            AND p.product_code like '%'||#{searchValue}||'%'
         </when>
      </choose>
      <if test="fromDate != null">
         AND i.que_regdate BETWEEN #{fromDate} AND #{toDate}
      </if>
   </select>

	
   <!-- 판매자 상품문의 답해주기 -->
   <update id="updateInquiryAns">
      update ar_inquiry
      set que_ans = #{queAns}
      WHERE
      que_code = #{queCode}
   </update>



   <!-- 판매자 마이페이지 -->
   <select id="selectSellerInfo" resultType="MemberVO">
      select member_name
      ,
      member_id
      ,member_email
      ,member_tel
      ,member_addr
      ,member_details_addr
      FROM
      ar_member
      WHERE member_id = #{memberId}
   </select>

   <!-- 정산건 목록 -->
   <resultMap type="SellerCalVO" id="selectCalList">
      <result column="order_detail_code" property="orderDetailCode" />
      <result column="fee" property="fee" />
      <result column="settlement_amount" property="settlementAmount" />
      <result column="settlement_date" property="settlementDate" />
      <result column="complet_date" property="completDate" />
      <result column="product_name" property="productName" />
      <result column="member_name" property="memberName" />
   </resultMap>
   <select id="selectCalList" resultMap="selectCalList">
      select p.product_name
      , o.order_detail_code
      , o.payment_price
      , o.payment_price * (c.fee * 0.01) AS myPrice
      , o.payment_price * (1 - (c.fee * 0.01)) AS yourPrice
      , c.settlement_date
      , c.complet_date
      , m.member_name
      FROM ar_calculate c
      JOIN ar_order_detail o ON o.order_detail_code = c.order_detail_code
      JOIN ar_orders r ON r.order_code = o.order_code
      JOIN ar_option_detail x ON
      o.option_detail_code = x.option_detail_code
      JOIN ar_products p ON x.product_code =
      p.product_code
      JOIN ar_member m ON r.member_id = m.member_id
      WHERE
      o.order_status = 4
   </select>
	
	<!-- optionVo list -->
	<select id="selectOptionList" resultType="OptionVO">
		select * from ar_option where product_code = #{productCode}
	</select>
	
	<!-- 옵션 디테일 -->
	<select id="selectOptionDetail" resultType="OptionDetailVO">
		select * from ar_option_detail where product_code = #{productCode}
	</select>
	
	

	<!-- option 리스트 -->
	<select id="getOptionList" resultType="OptionDetailVO">

		select * from
		ar_option_detail
		where product_code = #{productCode}
	</select>


<!-- 통계리스트 -->
<resultMap type="DetailVO" id="selectStatsList">
      <result column="member_id" property="memberId" />
      <result column="product_code" property="productCode" />
      <result column="product_name" property="productName" />
      <result column="sale_price" property="salePrice" />
      <result column="order_cnt" property="orderCnt" />
      <result column="sale_price" property="salePrice" />
      <result column="return_cnt" property="returnCnt" />
      <result column="cancel_cnt" property="cancelCnt" />
      <result column="total_price" property="totalPrice" />
      <collection property="optionDetail" resultMap="optionDetail" />
   </resultMap>

   <!-- OptionVO를 매핑하기 위한 resultMap -->
   <resultMap type="OptionDetailVO" id="optionDetail">
      <result column="option_detail_code" property="optionDetailCode" />
      <result column="option_last" property="optionLast" />
      <result column="option_count" property="optionCount" />
      <result column="option_price" property="optionPrice" />
   </resultMap>

	<select id="selectStatsList" resultMap="selectStatsList">
     select p.product_code
				, p.product_name
				, NVL(o.option_last,' ') as option_last
				, COALESCE(o.option_detail_code,0) as option_detail_code
				, (p.sale_price + o.option_price) AS sale_price
				, COALESCE(sum(od.order_cnt),0) as order_cnt
				, COALESCE(SUM(return_cnt(od.order_detail_code)),0) AS return_cnt
				, COALESCE(SUM(cancel_cnt(od.order_detail_code)),0) AS cancel_cnt
				, NVL((sum(od.order_cnt)- COALESCE(SUM(return_cnt(od.order_detail_code)),0)-
				COALESCE(SUM(cancel_cnt(od.order_detail_code)),0))*NVL((p.sale_price + o.option_price),0) ,0) AS total_price
		from ar_products p
		LEFT OUTER JOIN ar_option_detail o
						ON p.product_code = o.product_code
		LEFT OUTER JOIN ar_order_detail od
					ON o.option_detail_code = od.option_detail_code
		FULL OUTER join ar_return r
					ON od.order_detail_code = r.order_detail_code
		where member_id = 'hky03017'
		group by od.option_detail_code, o.option_last, o.option_price,
				p.product_name,
				o.option_detail_code, (p.sale_price + o.option_price), p.sale_price + o.option_price,
				o.option_price, p.product_code
		ORDER BY option_detail_code
	</select>

<!-- 월별 주문건수 -->
<select id="selectMonthlyCount" resultType="DetailVO">
SELECT
    EXTRACT(MONTH FROM order_date) AS month,
    SUM(order_cnt) AS total_order_count,
    COALESCE(SUM(return_cnt), 0) AS return_cnt,
    COALESCE(SUM(cancel_cnt), 0) AS cancel_cnt,
    SUM(total_sales_amount) AS total_price
FROM (
    SELECT
        order_date,
        order_cnt,
        COALESCE(return_cnt(od.order_detail_code), 0) AS return_cnt,
        COALESCE(cancel_cnt(od.order_detail_code), 0) AS cancel_cnt,
        (order_cnt - COALESCE(return_cnt(od.order_detail_code), 0) - COALESCE(cancel_cnt(od.order_detail_code), 0)) * (p.sale_price + o.option_price) AS total_sales_amount
    FROM ar_order_detail od
    JOIN ar_option_detail o ON o.option_detail_code = od.option_detail_code
    JOIN ar_products p ON p.product_code = o.product_code
    WHERE EXTRACT(YEAR FROM order_date) = #{year}
    AND p.member_id = 'hky03017'
) subquery
GROUP BY EXTRACT(MONTH FROM order_date)
ORDER BY EXTRACT(MONTH FROM order_date)
</select>


   <!-- 삭제 -->
   <update id="updateExStatus" parameterType="ProductVO">
      UPDATE ar_products
      SET product_exstatus =
      CASE
      WHEN product_exstatus = 'N' THEN 'Y'
      WHEN product_exstatus = 'Y' THEN 'N'
      END
      WHERE product_code = #{productCode}
   </update>


   <update id="updateDeliveryInfo" parameterType="DetailVO">
      UPDATE
      ar_order_detail
      SET delivery_service = #{deliveryService}
      ,
      delivery_number = #{deliveryNumber}
      , delivery_start = sysdate
      ,
      order_status = 3
      WHERE order_detail_code = #{orderDetailCode}
   </update>

   <update id="updateOrderStatus" parameterType="DetailVO">
      UPDATE
      ar_order_detail
      SET order_status = 2
      WHERE order_detail_code =
      #{orderDetailCode}
   </update>




	<!-- 상품등록 OptionVO,ProductVO -->
	<insert id="insertProduct"
		parameterType="com.ar.lighthouse.product.service.ProductVO">
		<selectKey order="BEFORE" keyProperty="productCode"
			resultType="String">
			SELECT 'P' ||
			to_char(LPAD(NVL(max(to_number(substr(product_code,-5))),0)+1,5,'0'))
			FROM ar_products
		</selectKey>
		INSERT INTO ar_products (
			product_code
			, member_id
			, category_code
			, product_name
			, product_content
			, product_location
			, product_cost
			, sale_price
			, product_brand
			, product_origin
			, product_makeorigin
			, delivery_cost
			, return_cost
			, exchange_cost
			, delivery_service
			, product_exstatus
			
		)
		VALUES ( #{productCode}
			, #{memberId}
			, #{categoryCode}
			, #{productName}
			, #{productContent}
			, #{productLocation}
			, #{productCost}
			, #{salePrice}
			, #{productBrand}
			, #{productOrigin}
			, #{productMakeorigin}
			, #{deliveryCost}
			, #{returnCost}
			, #{exchangeCost}
			, #{deliveryService}
			, 'Y'
			
		)

	</insert>


	<!-- 상품 옵션 등록 -->
   <insert id="insertOption" parameterType="OptionVO">
      <selectKey resultType="long" keyProperty="optionCode" order="BEFORE">
         SELECT NVL(MAX(option_code),0)+1
         FROM ar_option
      </selectKey>
      INSERT INTO ar_option (
      option_code
      , product_code
      , option_name
      , option_value
      )
      VALUES
      (
        #{optionCode}
      , #{productCode}
      , #{optionName}
      , #{optionValue}
      )
   </insert>
   
   <!-- option detail insert -->
   <insert id="insertOptionDetail" parameterType="OptionDetailVO">
      <selectKey resultType="long" keyProperty="optionDetailCode"
         order="BEFORE">
         SELECT NVL(MAX(option_detail_code),0)+1
         FROM ar_option_detail
      </selectKey>
      INSERT INTO ar_option_detail(
           option_detail_code
         , product_code
         , option_last
         , option_price
         , option_sell_status
         , option_exstatus
         , option_count
         , min_order
         , max_order

      )
      VALUES (
           #{optionDetailCode}
         , #{productCode}
         , #{optionLast}
         , #{optionPrice}
         , 'Y'
         , 'Y'
         , #{optionCount}
         , #{minOrder}
         , #{maxOrder}
      )
   </insert>

	<!-- 상품 이미지 등록 -->
	<insert id="insertProductImg" parameterType="ImgsVO">
		<selectKey resultType="int" keyProperty="imgCode"
			order="BEFORE">
			SELECT NVL(MAX(img_code),0)+1 FROM ar_imgs
		</selectKey>
		insert into ar_imgs
		(img_code
		,parent_code
		,img_order
		,img_name
		,upload_name
		,img_content
		,product_code
		,upload_path
		)

		values(
		#{imgCode}
		,
		'0'
		,#{imgOrder}
		,#{imgName}
		,#{uploadName}
		,#{imgContent}
		,#{productCode}
		,#{uploadPath}
		)

	</insert>

<!-- 상품수정 -->

<update id="updateProduct" parameterType="ProductVO">      
UPDATE ar_products
SET
    product_code = #{productCode},
    member_id = #{memberId},
    category_code = #{categoryCode},
    product_name = #{productName},
    product_content = #{productContent},
    product_location = #{productLocation},
    product_cost = #{productCost},
    sale_price = #{salePrice},
    product_brand = #{productBrand},
    product_origin = #{productOrigin},
    product_makeorigin = #{productMakeorigin},
    delivery_cost = #{deliveryCost},
    return_cost = #{returnCost},
    exchange_cost = #{exchangeCost},
    delivery_service = #{deliveryService},
    product_exstatus = 'Y',
    product_updatedate = sysdate
WHERE product_code = #{productCode}
</update>   
    
    
    
    
    
<!-- option -->
<update id="updateOption" parameterType="ProductVO">
UPDATE ar_option
SET
    option_name = #{optionName},
    option_value = #{optionValue}
WHERE product_code = #{productCode}
</update>
    
    
    
    
    
    
    
<!-- optionDetail -->
<update id="updateOptionDetail" parameterType="ProductVO">
UPDATE ar_option_detail
SET
    option_last = #{optionLast},
    option_price = #{optionPrice},
    option_count = #{optionCount},
    option_sell_status = 'Y',
    option_exstatus = 'Y'
WHERE product_code = #{productCode}
</update>
    
    
    
<!-- Imgs -->
<update id="updateProductImg" parameterType="ImgsVO">
UPDATE ar_imgs
SET
    img_order = #{imgOrder},
    img_name = #{imgName},
    upload_name = #{uploadName},
    img_content = #{imgContent},
    upload_path = #{uploadPath}
WHERE product_code = #{productCode}
</update>

	<!-- 김무준의 상세페이지~~ -->
	<select id="selectInfo" resultType="ProductVO">
		 select  
            m.member_id
         , p.product_code
         , p.category_code
         , p.product_name
         , p.product_content
         , p.product_location
         , p.product_cost
         , p.product_regdate
         , p.sale_price
         , p.product_brand
         , p.product_origin
         , p.product_makeorigin
         , p.delivery_cost
         , p.return_cost
         , p.exchange_cost
         , p.delivery_service
         , p.product_status
         , i.upload_name
         , i.img_content
          , m.business_number
         from ar_products p ,ar_imgs i, ar_member m
         where p.product_code = i.product_code 
         <![CDATA[
            and rownum < 2
            ]]>
         and p.member_id = m.member_id
         and p.product_code = #{productCode}
	</select>
	

	<!-- 택배사 가져오기 -->
	<select id="selectDeliveryList" resultType="CodeVO">
		SELECT *
		FROM ar_code
		WHERE master_code = '택배사 코드'
	</select>



	<select id="getImgsFiles">
		SELECT *
		FROM ar_imgs
	</select>

<!-- 판매자 문의 -->
<select id="selectSellerInquriy" resultType="com.ar.lighthouse.buyp.service.MyInquiryVO">
select * from ar_custom_inquiry
where member_id = #{memberId}
</select>

<!-- 판매자 문의 검색 -->
<select id="selectSeaSellerInq" resultType="com.ar.lighthouse.buyp.service.MyInquiryVO">
select * from ar_custom_inquiry
where member_id = #{memberId}
<if test="fromDate != null">
         AND custom_inquiry_regdate BETWEEN #{fromDate} AND #{toDate}
      </if>
</select>

</mapper>
