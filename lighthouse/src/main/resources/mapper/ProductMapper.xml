<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.ar.lighthouse.product.mapper.ProductMapper">


   <!-- 결과를 매핑하기 위한 resultMap -->
    <resultMap type="ProductVO" id="selectProductList">
        <result column="member_id" property="memberId"/>
        <result column="product_code" property="productCode"/>
        <result column="product_name" property="productName"/>
        <result column="delivery_cost" property="deliveryCost"/>
        <result column="product_regdate" property="productRegdate"/>
        <result column="product_cost" property="productCost"/>
        <result column="product_exstatus" property="productExStatus"/>
        <result column="sale_price" property="salePrice"/>
        <collection property="option" resultMap="optionList"/>
    </resultMap>

    <!-- OptionVO를 매핑하기 위한 resultMap -->
    <resultMap type="OptionVO" id="optionList">
        <result column="option_count" property="optionCount"/>
        <result column="option_price" property="optionPrice"/>
    </resultMap>
    
  <select id="getProductsByMemberId" resultMap="selectProductList">
        SELECT * FROM ar_products p
        INNER JOIN (
            SELECT product_code, SUM(option_count) AS option_count, SUM(sell_count) AS sell_count
            FROM ar_option
            GROUP BY product_code
        ) d ON p.product_code = d.product_code
        WHERE p.member_id = #{memberId}
    </select>

 





	<!-- 옵션선택 -->
	<resultMap type="ProductVO" id="selectOptionProduct">
		<result column="product_code" property="productCode" />
		<result column="product_name" property="productName" />
		<result column="delivery_cost" property="deliveryCost" />
		<result column="product_regdate" property="productRegdate" />
		<result column="product_exstatus" property="productExStatus" />
		<result column="product_cost" property="productCost" />
		<result column="sale_price" property="salePrice" />
		<collection property="option" resultMap="optionSelectList" />
	</resultMap>
	<resultMap type="OptionVO" id="optionSelectList">
		<result column="option_count" property="optionCount" />
		<result column="option_price" property="optionPrice" />

	</resultMap>
	<select id="selectOptionProduct" resultMap="selectOptionProduct">
		select * from ar_products p,
		(select product_code
		,sum(option_count) AS option_count
		,sum(sell_count) AS sell_count
		from ar_option
		group by
		product_code, product_code) d
		where d.product_code = p.product_code
		<choose>
			<when test="optionVal == '상품명순'">
				ORDER BY product_name
			</when>
			<when test="optionVal == '상품등록일순'">
				ORDER BY product_regdate
			</when>
			<when test="optionVal == '누적판매건수'">
				ORDER BY sell_count DESC
			</when>
			<when test="optionVal == '전시중'">
				AND product_exstatus = 'Y'
			</when>
			<when test="optionVal == '전시중지'">
				AND product_exstatus = 'N'
			</when>
		</choose>
	</select>
	
	<!-- option 리스트 -->
	<select id="getOptionList" resultType="OptionVO">
		select * from ar_option where product_code = #{productCode} 
	</select>
	
	
<!-- 주문목록 -->
<resultMap type="DetailVO" id="selectOrderDetail">
    <result column="member_id" property="memberId"/>
    <result column="product_name" property="productName"/>
    <result column="order_detail_code" property="orderDetailCode"/>
    <result column="order_cnt" property="orderCnt"/>
    <result column="requested_term" property="requestedTerm"/>
    <result column="delivery_company" property="deliveryCompany"/>
    <result column="delivery_number" property="deliveryNumber"/>
    <result column="delivery_start" property="deliveryStart"/>
    <association property="option"  resultMap="optionList2"/>
</resultMap>

<!-- OptionVO를 매핑하기 위한 resultMap -->
<resultMap type="OptionVO" id="optionList2">
    <result column="option_name" property="optionName"/>
    <result column="option_value" property="optionValue"/>
    <result column="product_code" property="productCode"/>
   
</resultMap>
<select id="selectOrderDetail" resultMap="selectOrderDetail">
     SELECT
        o.order_detail_code,
        p.product_name,
        x.option_name,
        x.option_value,
        r.requested_term,
        o.order_cnt,
        o.delivery_company,
        o.delivery_number,
        o.delivery_start
    FROM
        ar_order_detail o
    JOIN
        ar_orders r ON o.order_code = r.order_code
    JOIN
        ar_option x ON o.option_code = x.option_code
    JOIN
        ar_products p ON x.product_code = p.product_code
</select>

<!-- 취소목록 -->

<resultMap type="CancelVO" id="selectCancelList">
	<result column="cancel_code" property="cancelCode"/>
	<result column="cancel_reason" property="cancelReason"/>
	<result column="order_detail_code" property="orderDetailCode"/>
	<result column="product_name" property="productName"/>
	<result column="order_status" property="orderStatus"/>
	<result column="charge_date" property="chargeDate"/>
	<result column="cancel_regdate" property="cancelRegdate"/>
	<result column="member_name" property="memberName"/>
</resultMap>

<select id="selectCancelList" resultMap="selectCancelList">
select c.cancel_code
      , d.order_detail_code
      , p.product_name
      , d.order_status
      , c.cancel_reason
      , o.charge_date
      , c.cancel_regdate
      , m.member_name
FROM ar_cancel c
JOIN ar_order_detail d ON c.order_detail_code = d.order_detail_code
JOIN ar_orders o ON d.order_code = o.order_code
JOIN ar_option z ON z.option_code = d.option_code
JOIN ar_products p ON p.product_code = z.product_code
JOIN ar_member m ON m.member_id = o.member_id
</select>

<!-- 교환목록 -->
<resultMap type="ExchangeVO" id="selectExchangeList">
	<result column="exchange_code" property="exchangeCode"/>
	<result column="order_detail_code" property="orderDetailCode"/>
	<result column="product_name" property="productName"/>
	<result column="exchange_reason" property="exchangeReason"/>
	<result column="order_status" property="orderStatus"/>
	<result column="charge_date" property="chargeDate"/>
	<result column="exchange_regdate" property="exchangeRegdate"/>
	<result column="member_name" property="memberName"/>
</resultMap>

<select id="selectExchangeList" resultMap="selectExchangeList">
select e.exchange_code
      , d.order_detail_code
      , p.product_name
      , d.order_status
      , e.exchange_reason
      , o.charge_date
      , e.exchange_regdate
      , m.member_name
FROM ar_exchange e
JOIN ar_order_detail d ON e.order_detail_code = d.order_detail_code
JOIN ar_orders o ON d.order_code = o.order_code
JOIN ar_option z ON z.option_code = d.option_code
JOIN ar_products p ON p.product_code = z.product_code
JOIN ar_member m ON m.member_id = o.member_id
</select>


<!-- 반품목록 -->
<resultMap type="ReturnVO" id="selectReturnList">
	<result column="return_code" property="returnCode"/>
	<result column="order_detail_code" property="orderDetailCode"/>
	<result column="product_name" property="productName"/>
	<result column="return_reason" property="returnReason"/>
	<result column="order_status" property="orderStatus"/>
	<result column="charge_date" property="chargeDate"/>
	<result column="return_regdate" property="returnRegdate"/>
	<result column="member_name" property="memberName"/>
</resultMap>

<select id="selectReturnList" resultMap="selectReturnList">
select r.return_code
      , d.order_detail_code
      , p.product_name
      , d.order_status
      , r.return_reason
      , o.charge_date
      , r.return_regdate
      , m.member_name
FROM ar_return r
JOIN ar_order_detail d ON r.order_detail_code = d.order_detail_code
JOIN ar_orders o ON d.order_code = o.order_code
JOIN ar_option z ON z.option_code = d.option_code
JOIN ar_products p ON p.product_code = z.product_code
JOIN ar_member m ON m.member_id = o.member_id
</select>

<!-- 판매자 마이페이지 -->
<select id="selectSellerInfo" resultType="MemberVO">
select member_name
       , member_id
       ,member_email
       ,member_tel
       ,member_addr
       ,member_details_addr
FROM ar_member
WHERE member_id = #{memberId}
</select>

	<!-- 상품등록 OptionVO,ProductVO -->
	<insert id="insertProduct"  parameterType="com.ar.lighthouse.product.service.ProductVO">
		<selectKey order="BEFORE" keyProperty="productCode" resultType="String">
  			SELECT 'P' || to_char(LPAD(NVL(max(to_number(substr(product_code,-5))),0)+1,5,'0'))
			  FROM ar_products
  		</selectKey>
		INSERT INTO ar_products (
				  product_code
				, member_id
				, category_code
    			, product_name
                , product_content
                , product_location
    			, product_cost
    			, sale_price
    			, product_brand
    			, product_origin
    			, product_makeorigin
    			, delivery_cost
    			, return_cost
    			, exchange_cost
                , delivery_service
                , product_exstatus)
		VALUES (      #{productCode}
					, #{memberId}
					, #{categoryCode}
					, #{productName}
					, #{productContent}
					, #{productLocation}
					, #{productCost}
					, #{salePrice}
					, #{productBrand}
					, #{productOrigin}
					, #{productMakeorigin}
					, #{deliveryCost}
					, #{returnCost}
					, #{exchangeCost}
					, #{deliveryService}
					, 'Y'
					)
		
		<!-- INSERT ALL 
		INTO ar_products (product_code
				, member_id
				, category_code
    			, product_name
                , product_content
                , product_location
    			, product_cost
    			, sale_price
    			, product_brand
    			, product_origin
    			, product_makeorigin
    			, delivery_cost
    			, return_cost
    			, exchange_cost
                , delivery_service
                , product_exstatus)
		VALUES (#{productCode}
					, #{memberId}
					, #{categoryCode}
					, #{productName}
					, #{productContent}
					, #{productLocation}
					, #{productCost}
					, #{salePrice}
					, #{productBrand}
					, #{productOrigin}
					, #{productMakeorigin}
					, #{deliveryCost}
					, #{returnCost}
					, #{exchangeCost}
					, #{deliveryService}
					, 'Y'
					)
	<selectKey resultType="long" keyProperty="option_code" order="BEFORE">
        SELECT MAX(option_code)+1 FROM ar_option       
    </selectKey> 
		INTO ar_option (option_code
                    , product_code
                    , option_order
                    , option_name
                    , option_value
                    , option_price
                    , option_sell_status
                    , option_exstatus
                    , option_count
                    , min_order 
                    , max_order
                        )
	VALUES
	    	(#{optionCode}
	    	, #{productCode}
	    	, #{optionOrder}
	    	, #{optionName}
	    	, #{optionValue}
	    	, #{optionPrice}
	    	, #{optionSellStatus}
	    	, #{optionExStatus}
	    	, #{optionCount}
	    	, #{minOrder}
	    	, #{maxOrder}
	    	) -->
	</insert>
	
	<!-- 상품 옵션 등록 -->
	<insert id="insertOption" parameterType="OptionVO">
		<selectKey resultType="long" keyProperty="optionCode" order="BEFORE">
        SELECT NVL(MAX(option_code),0)+1 
          FROM ar_option       
    	</selectKey> 
		INSERT INTO ar_option (option_code
                    , product_code
                    , option_order
                    , option_name
                    , option_value
                    , option_price
                    , option_count
                    <if test="optionSellStatus != null and !optionSellStatus.equals('')">
                    , option_sell_status
                    </if>
              )
	VALUES
	    	(#{optionCode}
	    	, #{productCode}
	    	, #{optionOrder}
	    	, #{optionName}
	    	, #{optionValue}
	    	, #{optionPrice}
	    	, #{optionCount}
   	 		<if test="optionSellStatus != null and !optionSellStatus.equals('')">
           	 , #{optionSellStatus}
            </if>
	    	) 
	</insert>

	<!-- 상품 이미지 등록  -->
	<insert id="insertProductImg" parameterType="ImgsVO">
		<selectKey resultType="int" keyProperty="imgCode" order="BEFORE">	
	  		SELECT NVL(0, MAX(img_code))+1 FROM ar_imgs  
	  	</selectKey>
	  	insert into ar_imgs
    		(img_code
    		,parent_code
    		,img_order
    		,img_name
    		,upload_name
    		,img_content
    		,product_code
    		,upload_path
    		)
    		
    	values(
    		#{imgCode}
    	   , '0'
    	   ,#{imgOrder}
    	   ,#{imgName}
    	   ,#{uploadName}
    	   ,#{imgContent}
    	   ,#{productCode}
    	   ,#{uploadPath}
    	   )
	  	
	</insert>

	

	

	<!-- 삭제 -->
	<update id="updateExStatus" parameterType="ProductVO">
	UPDATE ar_products 
	<if test=""></if>
	SET product_exstatus = 'Y'
	WHERE product_code = #{productCode}
	</update>
	
	
   <update id="updateDeliveryInfo" parameterType="DetailVO">
      UPDATE ar_order_detail
      SET delivery_company = #{deliveryCompany}, delivery_number = #{deliveryNumber}, delivery_date = sysdate 
      WHERE order_detail_code = #{orderDetailCode}
   </update>
	
	
	





<!-- 김무준의 상세페이지~~ -->
	<select id="selectInfo" resultType="ProductVO">
		select member_id
			 , p.product_code
             , p.category_code
             , p.product_name
             , p.product_content
             , p.product_location
             , p.product_cost
             , p.product_regdate
             , p.sale_price
             , p.product_brand
             , p.product_origin
             , p.product_makeorigin
             , p.delivery_cost
             , p.return_cost
             , p.exchange_cost
             , p.delivery_service
             , p.product_status
               , i.upload_name
               , i.img_content
		from ar_products p , ar_imgs i 
        where p.product_code = i.product_code
		and p.product_code = #{productCode}
	</select>
	
	<!-- 택배사 가져오기 -->
	<select id="selectDeliveryList" resultType="CodeVO">
		SELECT *
		  FROM ar_code 
		 WHERE master_code = '택배사 코드'
	</select>
	
</mapper>
